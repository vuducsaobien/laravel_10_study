1. onDelete('cascade')
    - Khi xóa cha 
        (Table 1): Các bản ghi con (table 2) bị xóa.
        Khi table cha - table 1 : có id = 1 bị xoá
        => ở table con - table 2 : Các bản ghi nào có column table_1_id = 1 sẽ bị xoá tự động
        - Cách kiểm tra: Xoá id = 1 trong table cha - table 1

2. onDelete('restrict')
    - Khi xóa cha 
    Ngăn không cho xóa hoặc cập nhật bản ghi cha nếu tồn tại bản ghi con liên quan.
        Nếu table 2       có bản ghi table_1_id = 1 => Ở table cha không xoá id = 1 được
        Nếu table 2 không có bản ghi table_1_id = 1 => Ở table cha       xoá id = 1 được

3. onDelete('set null')
    Mô tả: Khi một bản ghi cha bị xóa hoặc cập nhật, các bản ghi con sẽ đặt giá trị trong cột khóa ngoại thành NUL
    Lưu ý: Cột khóa ngoại trong bảng con phải cho phép NULL (table_1_id phải được NULL)

4. onDelete('no action')
    Mô tả: Tương tự restrict, nhưng hành động xóa hoặc cập nhật cha sẽ không bị kiểm tra ngay lập tức
    Quyết định lỗi phụ thuộc vào việc thực thi các ràng buộc sau đó trong cơ sở dữ liệu.
    Trong Db transaction

-------------------------------- Relationship Model --------------------------------

1. one to one
    Sử dụng 2 table User & Finger
    Xoá table_1 trong DB
    chạy php artisan migrate
    Xoá column migration 2025_01_21_000001_create_table_11 trong table migrations
    php artisan migrate:refresh  // refresh id tự tăng trong DB

Explain - one to one ; cha con như nhau
    - Mỗi User chỉ có 1 Finger      - Môĩ Finger chỉ thuộc về 1 User
            ONE                     -           ONE
    - Nếu thêm 1 bản ghi finger có user_id đã tồn tại trong column user_id trong table finger thì không tạo được
    - Table 1 : cha : User
    - Table 2 : con : Finger

2. One to Many
    - Sử dụng 2 table : User - cha & Phone - con
    - 1 User có thể có nhiều số điện thoại - Phone (Many)
    - Nhưng 1 số điện thoại chỉ thuộc về 1 User (Ones) 
    - Số điện thoại là Unique (ví dụ số đt 0123456 là duy nhất)
    http://localhost:8000/oneToMany

3. Many to Many
    - Sử dụng 3 table : 
        + User
        + table trung gian (users_products)
        + Products
    - 1 User có thể mua nhiều Sản phầm
    - 1 Sản phẩm có thể được mua bới nhiều User
    - Để ý việc trùng lặp cặp column (user_id & product_id)
        ( Có 2 bản ghi trong table trung gian - users_products có cùng cặp giá trị user_id & product_id
            id      user_id     product_id 
            1         2         3
            2         2         3
        )

        + Trường hợp Không trùng lặp (table trung gian - users_products không thể có 2 bản ghi như id = 1 & id = 2 như ví dụ trên)
            - Sử dụng unique constraint để ngăn cặp user_id và product_id trùng lặp


        + Trường hợp Không trùng lặp (table trung gian - users_products có thể có    2 bản ghi như id = 1 & id = 2 như ví dụ trên - Trường hợp này chiếm đa số)

        + Pivot của bảng trung gian User_products

4. Has Many Through (Có nhiều qua) - http://lar_10.local:81/hasManyThrough
    - Quan hệ Has Many Through được sử dụng khi một bảng A - chính có 
        (nhiều bản ghi) liên quan đến bảng C - đích - plan 
        thông qua bảng B - trung gian - subcription.

    - Quan hệ Has One Through được sử dụng khi một bảng A - chính có 
        (một bản ghi) liên quan đến bảng C - đích 
        thông qua bảng B - trung gian.
    
    - hasManyThrough không cho phép bạn truy vấn trực tiếp các cột từ bảng trung gian (subscriptions). 
    Khi sử dụng hasManyThrough, Eloquent chỉ trả về dữ liệu từ bảng đích (plans).

    - Một user có thể có nhiều subscriptions (gói đăng ký) Hay 1 User có thể mua được nhiều gói
        Một subscription thuộc về một plan

        users (Bảng chính - A)
        subscriptions (gói đăng ký - B bảng trung gian)
        plans (gói dịch vụ - C bảng đích)
        User ➝ Subscription ➝ Plan ( User => Subscription => Plan)

    - Data mẫu bản ghi bảng trung gian subcription: user_id & plan_id có thể bị trùng lặp
    id  name                            end_at                  user_id     plan_id
    1	Sub 1 - plan A - not available	2025-01-15 00:00:00	    1	        1
    2	Sub 2 - plan A - available		2025-06-15 00:00:00	    1	        1
    3	Sub 3 - plan A - available		2025-06-15 00:00:00	    1	        1
    4	Sub 4 - plan B - available		2025-06-15 00:00:00	    1	        2

    - So sánh
    hasOneThrough & hasManyThrough:
        Không cần truy vấn bảng trung gian (subscriptions), chỉ tập trung lấy bảng cuối (plans).
        Không thể filter/sort bảng trung gian.
        Nếu cần filter subscriptions, phải dùng whereHas()

        hasOneThrough & hasManyThrough → Không cần truy vấn bảng trung gian
        Mặc định, Laravel tự động JOIN bảng trung gian (subscriptions) mà không cần query thủ công trong model hoặc controller.
        Không thể filter trực tiếp bảng trung gian (subscriptions) bằng where(), orderBy(), vì Eloquent chỉ tập trung lấy kết quả cuối cùng (Plan).
        Chỉ có thể filter trên bảng đích (plans).

        hasOneThrough() → Lấy 1 bản ghi duy nhất từ bảng cuối cùng.
        hasManyThrough() → Lấy tất cả bản ghi từ bảng cuối cùng.

    manyToMany:
        Cần truy vấn bảng trung gian (wherePivot(), orderByPivot()).
        Có thể filter/sort bảng trung gian.

    5. Has One Through http://lar_10.local:81/hasOneThrough
        Supplier ➝ User ➝ History
        history chỉ cần biết user_id là đủ, vì user có thể có tối đa một bản ghi lịch sử liên quan.
        hasOneThrough ở đây sẽ lấy một bản ghi history duy nhất thông qua user

        Ví dụ Cấu trúc
            users	history
            id = 1	user_id = 1
            id = 2	user_id = 2
        🔹 Chỉ cần user_id là đủ để tra ngược supplier.

        hasOneThrough, mối quan hệ này hoạt động theo cách một Supplier chỉ có thể lấy ra đúng một bản ghi từ bảng History thông qua User.
        $supplier = Supplier::find(1);
        $history = $supplier->userHistory;

        UserModel có 2 relation ; History Model có 1 relation ; Supplier Model có 2 relation
        A. FK
        Table Users 
            có supplier_id 
            => User Model (1)                                   => Supplier Model (1): 
            public function supplier()                          public function user()
            { return $this->belongsTo(Supplier::class); }       { return $this->hasOne(User::class); }

        Table History 
            có user_id 
            => History Model (1)                                => User Model (2):
            public function user()                              public function history()
            { return $this->belongsTo(User::class); }           { return $this->hasOne(History::class); }    

        B. Has One Through : Supplier ➝ User ➝ History ; từ Supplier thông qua ($through) User - để lấy History ($related)
        => Supplier Model:
        public function userHistory()
                                        $related    , $through
        { return $this->hasOneThrough(History::class, User::class); }
        => $supplier = Supplier::find(1);
        => $history = $supplier->userHistory;

- Docker
    + Xóa hết các Images, Container, Build cũ ở Docker Desktop
    + env: 
        - DB_CONNECTION=mysql
        - DB_HOST=mariadb
        - DB_PORT=3309
        - DB_DATABASE=laravel_10_study
        - DB_USERNAME=root_abc
        - DB_PASSWORD=root_abc_password
    + docker-compose build --no-cache
    + docker-compose up -d
    + Kết nối DBeaver:
        - Server host : localhost
        - Port: 3309
        - Database: laravel_10_study
        - Username: root
        - Password: root_abc_password

    + Trên Containers Tab 
        - laravel_10_study                  
                                                Images                              Port
            + nginx-1                           nginx:latest                        8000:80
            + mariadb-1                         mariadb:11.5.2                      3309:3306
            + laravel_10_study-1                laravel_10_study-laravel_10_study   8900:9000
    + Trên Docker Images có 3 Imgaes riêng biệt
        - laravel_10_study-laravel_10_study : latest
        - nginx                             : latest
        - mariadb                           : 11.5.2
    + Trên Volumes Tab: laravel_10_study_mariadb
    + Trên Builds Tab: laravel_10_study

docker-compose exec laravel_10_study bash
chown -R www-data:www-data /var/www/laravel_10_study/storage
chmod -R 775 /var/www/laravel_10_study/storage

touch /var/www/laravel_10_study/storage/logs/laravel.log
chown www-data:www-data /var/www/laravel_10_study/storage/logs/laravel.log
chmod 664 /var/www/laravel_10_study/storage/logs/laravel.log

Hoặc excute vào Container laravel_10_study-1 chạy các lệnh trên
php artisan key:generate

- Url
    + http://localhost:8000/     * Laravel web browser
    + http://localhost:8080/     * Memcached UI web browser
    + 
